# -*- coding: utf-8 -*-
"""Logistic Model for Absenteeism.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1piLTgw95sbc4hyiuF2vjUL9IFsV8-5zU
"""

import pandas as pd
raw_csv_data=pd.read_csv('/content/Absenteeism_data.csv')

from google.colab import drive
drive.mount('/content/drive')

df=raw_csv_data.copy()

df

pd.options.display.max_columns=None
pd.options.display.max_rows=None

display(df)

df.info()

#Drop ID
df = df.drop(['ID'], axis=1)

#reason for absence
df['Reason for Absence'].min()

df['Reason for Absence'].max()

pd.unique(df['Reason for Absence'])

len(pd.unique(df['Reason for Absence']))

sorted(pd.unique(df['Reason for Absence'].unique()))

reason_columns=pd.get_dummies(df['Reason for Absence'])

reason_columns

reason_columns['check']=reason_columns.sum(axis=1)
reason_columns

reason_columns['check'].sum(axis=0)

reason_columns['check'].unique()

reason_columns=reason_columns.drop(['check'],axis=1)
reason_columns

reason_columns=pd.get_dummies(df['Reason for Absence'], drop_first= True)
reason_columns

#Group the reasons for Absence:
df.columns.values

reason_columns.columns.values

df=df.drop(['Reason for Absence'], axis=1)
df

reason_columns.loc[:,1:14].max(axis=1)

reason_columns_1=reason_columns.loc[:, 1:14].max(axis=1)
reason_columns_2=reason_columns.loc[:, 15:17].max(axis=1)
reason_columns_3=reason_columns.loc[:, 18:21].max(axis=1)
reason_columns_4=reason_columns.loc[:, 22:].max(axis=1)

#concatenate column values
df

df=pd.concat([df, reason_columns_1,reason_columns_2,reason_columns_3,reason_columns_4],axis=1)
df

#to assign meaningful names to columns
df.columns.values

column_names=['Date', 'Transportation Expense', 'Distance to Work', 'Age',
       'Daily Work Load Average', 'Body Mass Index', 'Education',
       'Children', 'Pets', 'Absenteeism Time in Hours', 'Reason_1', 'Reasaon_2', 'Reason_3', 'Reason_4']
df.columns= column_names
df.head()

#Reorder Columns
column_names_reordered=['Reason_1', 'Reasaon_2', 'Reason_3', 'Reason_4','Date', 'Transportation Expense', 'Distance to Work', 'Age',
       'Daily Work Load Average', 'Body Mass Index', 'Education',
       'Children', 'Pets', 'Absenteeism Time in Hours']
df=df[column_names_reordered]
df.head()

#Creating a checkpoint
df_reason_mod= df.copy()
df_reason_mod

#date column reordering
type(df_reason_mod['Date'][0])

df_reason_mod['Date']=pd.to_datetime(df_reason_mod['Date'])
df_reason_mod['Date']

#timestamp= A classical data type found innmnay programming languages ouut there used for values representing dates and time
df_reason_mod['Date']= pd.to_datetime(df_reason_mod['Date'], format='%d%m%Y')
type(df_reason_mod['Date'][0])

df_reason_mod.info()

#retriving the month value
df_reason_mod['Date'][0]

df_reason_mod['Date'][0].month

list_months=[]
list_months
df_reason_mod.shape

for i in range(df_reason_mod.shape[0]):
  list_months.append(df_reason_mod['Date'][i].month)
list_months

len(list_months)

df_reason_mod['Month Value']= list_months
df_reason_mod.head(20)

#day of the Week of the column
df_reason_mod['Date'][699].weekday()

def date_to_weekday(date_value):
  return date_value.weekday()

df_reason_mod['Day of the Week']= df_reason_mod['Date'].apply(date_to_weekday)
df_reason_mod.head()

df_reason_date_mode= df_reason_mod.copy()
df_reason_date_mode

# to check the data is in correct format
type(df_reason_date_mode['Transportation Expense'][0])
type(df_reason_date_mode['Distance to Work'][0])
type(df_reason_date_mode['Age'][0])
type(df_reason_date_mode['Daily Work Load Average'][0])
type(df_reason_date_mode['Body Mass Index'][0])

#Dealing with the education column
df_reason_date_mode['Education'].unique()

df_reason_date_mode['Education'].value_counts()

df_reason_date_mode['Education']=df_reason_date_mode['Education'].map({1:0, 2:1, 3:1, 4:1})

df_reason_date_mode['Education'].unique()

df_reason_date_mode['Education'].value_counts()

#Final Check points
df_preprocessed =df_reason_date_mode.copy()
df_preprocessed.head(10)

from absenteeism_module import *

import pandas as pd
pd.read_csv('Absenteeism_new_data.csv')

!pip uninstall scikit-learn
!pip install scikit-learn==0.22

model=absenteeism_model('/content/model','/content/scaler')

model.load_and_clean_data('/content/Absenteeism_new_data.csv')
model.predicted_outputs()

